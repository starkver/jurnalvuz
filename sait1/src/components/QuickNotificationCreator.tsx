import { useState } from "react";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { Textarea } from "./ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Bell, Send, X } from "lucide-react";
import { toast } from "../lib/toast";

interface QuickNotificationCreatorProps {
  onClose: () => void;
  onSuccess: () => void;
}

interface Notification {
  id: string;
  title: string;
  message: string;
  type: 'info' | 'warning' | 'success' | 'error';
  targetUsers: 'all' | 'students' | 'teachers' | 'specific';
  specificUsers?: string[];
  expiryDate?: string;
  createdAt: string;
  createdBy: string;
  isActive: boolean;
}

export function QuickNotificationCreator({ onClose, onSuccess }: QuickNotificationCreatorProps) {
  const [formData, setFormData] = useState({
    title: '',
    message: '',
    type: 'info' as const,
    targetUsers: 'all' as const,
    specificUsers: '',
    expiryDate: ''
  });

  const handleSubmit = () => {
    if (!formData.title.trim() || !formData.message.trim()) {
      toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    const newNotification: Notification = {
      id: Date.now().toString(),
      title: formData.title.trim(),
      message: formData.message.trim(),
      type: formData.type,
      targetUsers: formData.targetUsers,
      specificUsers: formData.specificUsers ? formData.specificUsers.split(',').map(u => u.trim()) : undefined,
      expiryDate: formData.expiryDate || undefined,
      createdAt: new Date().toISOString(),
      createdBy: 'admin',
      isActive: true
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    const existing = JSON.parse(localStorage.getItem('adminNotifications') || '[]');
    const updated = [newNotification, ...existing];
    localStorage.setItem('adminNotifications', JSON.stringify(updated));

    toast.success('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    onSuccess();
    onClose();
  };

  const getTypeDescription = (type: string) => {
    switch (type) {
      case 'info': return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
      case 'warning': return '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
      case 'success': return '–£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ';
      case 'error': return '–û—à–∏–±–∫–∞ –∏–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
      default: return '';
    }
  };

  const getAudienceDescription = (audience: string) => {
    switch (audience) {
      case 'all': return '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—Ä—Ç–∞–ª–∞';
      case 'students': return '–¢–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã';
      case 'teachers': return '–¢–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏';
      case 'specific': return '–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏';
      default: return '';
    }
  };

  return (
    <div className="fixed inset-0 bg-black/50 z-[100] flex items-center justify-center p-4">
      <Card className="w-full max-w-md max-h-[90vh] overflow-y-auto">
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <Bell className="h-5 w-5" />
              –ë—ã—Å—Ç—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            </CardTitle>
            <Button variant="ghost" size="sm" onClick={onClose}>
              <X className="h-4 w-4" />
            </Button>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="quick-title">–ó–∞–≥–æ–ª–æ–≤–æ–∫ *</Label>
            <Input
              id="quick-title"
              value={formData.title}
              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
              placeholder="–ö—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
              maxLength={100}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="quick-message">–°–æ–æ–±—â–µ–Ω–∏–µ *</Label>
            <Textarea
              id="quick-message"
              value={formData.message}
              onChange={(e) => setFormData(prev => ({ ...prev, message: e.target.value }))}
              placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ..."
              rows={3}
              maxLength={500}
            />
            <div className="text-xs text-muted-foreground text-right">
              {formData.message.length}/500
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="quick-type">–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Label>
            <Select 
              value={formData.type} 
              onValueChange={(value: any) => setFormData(prev => ({ ...prev, type: value }))}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="info">üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</SelectItem>
                <SelectItem value="warning">‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</SelectItem>
                <SelectItem value="success">‚úÖ –£—Å–ø–µ—Ö</SelectItem>
                <SelectItem value="error">‚ùå –û—à–∏–±–∫–∞</SelectItem>
              </SelectContent>
            </Select>
            <div className="text-xs text-muted-foreground">
              {getTypeDescription(formData.type)}
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="quick-audience">–ê—É–¥–∏—Ç–æ—Ä–∏—è</Label>
            <Select 
              value={formData.targetUsers} 
              onValueChange={(value: any) => setFormData(prev => ({ ...prev, targetUsers: value }))}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</SelectItem>
                <SelectItem value="students">üéì –¢–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã</SelectItem>
                <SelectItem value="teachers">üë®‚Äçüè´ –¢–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏</SelectItem>
                <SelectItem value="specific">üë§ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</SelectItem>
              </SelectContent>
            </Select>
            <div className="text-xs text-muted-foreground">
              {getAudienceDescription(formData.targetUsers)}
            </div>
          </div>

          {formData.targetUsers === 'specific' && (
            <div className="space-y-2">
              <Label htmlFor="quick-users">–ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</Label>
              <Input
                id="quick-users"
                value={formData.specificUsers}
                onChange={(e) => setFormData(prev => ({ ...prev, specificUsers: e.target.value }))}
                placeholder="user1, user2, user3"
              />
              <div className="text-xs text-muted-foreground">
                –í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
              </div>
            </div>
          )}

          <div className="space-y-2">
            <Label htmlFor="quick-expiry">–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
            <Input
              id="quick-expiry"
              type="datetime-local"
              value={formData.expiryDate}
              onChange={(e) => setFormData(prev => ({ ...prev, expiryDate: e.target.value }))}
            />
            <div className="text-xs text-muted-foreground">
              –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </div>
          </div>

          <div className="flex gap-2 pt-4">
            <Button onClick={handleSubmit} className="flex-1">
              <Send className="h-4 w-4 mr-2" />
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </Button>
            <Button variant="outline" onClick={onClose}>
              –û—Ç–º–µ–Ω–∞
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}